// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_camera_calibration.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterCameraCalibrationBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterCameraCalibrationBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterCameraCalibrationBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> opencvVersion() {
    return _opencvVersion();
  }

  late final _opencvVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'opencvVersion');
  late final _opencvVersion =
      _opencvVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<Camera_Info> camera_calibrate(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> filelist,
  ) {
    return _camera_calibrate(
      argc,
      argv,
      filelist,
    );
  }

  late final _camera_calibratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Camera_Info> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('camera_calibrate');
  late final _camera_calibrate = _camera_calibratePtr.asFunction<
      ffi.Pointer<Camera_Info> Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

class Camera_Info extends ffi.Struct {
  @ffi.Int()
  external int rows;

  @ffi.Int()
  external int cols;

  @ffi.Int()
  external int length;

  external ffi.Pointer<ffi.Float> array;
}
